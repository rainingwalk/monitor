import os
from flask import Flask, render_template, session, redirect, url_for, request, g, flash, jsonify, json
from flask.ext.script import Manager
from flask.ext.bootstrap import Bootstrap
from flask.ext.moment import Moment
from flask.ext.wtf import Form
from wtforms import StringField, SubmitField
from wtforms.validators import Required
from flask.ext.sqlalchemy import SQLAlchemy

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

app = Flask(__name__)

DB_CONNECT_STRING = 'mysql+mysqldb://root@localhost/nagios?charset=utf8'
engine = create_engine(DB_CONNECT_STRING, echo=True)
DB_Session = sessionmaker(bind=engine)
session = DB_Session()

manager = Manager(app)
bootstrap = Bootstrap(app)
moment = Moment(app)
db = SQLAlchemy(app)


#app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql://root:@localhost:3306/serverinfo?charset=utf8'
#app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN'] = True
#db = SQLAlchemy(app)


@app.route("/", methods=["GET"])
def index():
    return render_template("cmdb.html")



@app.route("/groups", methods=["GET","POST"])
def projectlist():
    groups = session.execute('select alias from nagios_hostgroups;')
    return render_template("index.html", groups = groups)
    #return jsonify(groups)

@app.route("/servers", methods=["GET"])
def servers():
    #p = db.session.query(Server.project).all()
    #projects = sorted(set(p),key=p.index)
    #return json.dumps(projects)
    servers = session.execute('select alias, address from nagios_hosts;')
    #return json.dumps(servers)
    return render_template("index.html", servers=servers)

@app.route("/check/<host>/<service>", methods=["GET", "POST"])
def check(host,service):
    #sql = "select C.alias, C.address, A.end_time,A.output, B.display_name from nagios_servicechecks as A, nagios_services as B, nagios_hosts as C where C.alias like '%s' and A.service_object_id=B.service_object_id  and B.display_name like '%%%s%%' order by A.end_time desc limit 1;" % (host, service)
    sql = "select A.end_time,A.output from nagios_servicechecks as A, nagios_services as B, nagios_hosts as C where C.alias like '%s' and A.service_object_id=B.service_object_id  and B.display_name like '%%%s%%' order by A.end_time desc limit 1;" % (host, service)
    status = session.execute(sql)
    #service_status = [{'ip': s.address, 'end_time': s.end_time, 'status': s.output, 'items': s.display_name, 'host': s.alias} for s in status]
    service_status = [{'end_time': s.end_time, 'status': s.output} for s in status]
    #return render_template("index_ok.html", serverlists=serverlists)
    return json.dumps(service_status)
@app.route("/scan", methods=["GET", "POST"])
def scan():
    keywords = (request.args.get('keywords')).strip()
#    for keys in ["host", "ip", "cpu", "cpunum", "mem_total", "project", "create_date"]:
#        filters = "".join("Server.%s.like('%%'+%s+'%%'),") % (keys, keywords)
#    print filters
#    servers = db.session.query(Server).filter(or_(filters)).all()
    servers = db.session.query(Server).filter(or_(Server.ip.like('%'+keywords+'%'), Server.host.like('%'+keywords+'%'), Server.cpu.like('%'+keywords+'%'), Server.cpunum.like('%'+keywords+'%'), Server.mem_total.like('%'+keywords+'%'), Server.project.like('%'+keywords+'%'), Server.create_date.like('%'+keywords+'%'))).all()

    if servers is None:
        search_result={'server_ip':None}
        return render_template("index_ok.html", search_result=search_result)
    else:
        search_result = [{'host': s.host, 'ip': s.ip, 'cpu': s.cpu, 'cpunum': s.cpunum, 'mem_total': s.mem_total, 'project': s.project, 'time': s.create_date} for s in servers]
        return json.dumps(search_result,ensure_ascii=False)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)

